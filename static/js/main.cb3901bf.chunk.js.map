{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","className","style","recipe","title","image","src","alt","ingredientsNutrientsDiv","ingredientsDiv","ingredientsList","ingredients","map","ingredient","text","nutrientsDiv","calories","value","displayType","format","nutrientsList","nutrients","slice","nutrient","total","unit","label","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","name","type","placeholder","onChange","target","key","digest","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,sBAAsB,MAAQ,sBAAsB,wBAA0B,wCAAwC,eAAiB,+BAA+B,gBAAkB,gCAAgC,aAAe,6BAA6B,cAAgB,gC,qNCgC/TC,EA5BA,SAACC,GACZ,OACI,yBAAKC,UAAWC,IAAMC,QAClB,wBAAIF,UAAWC,IAAME,OAAQJ,EAAMI,OACnC,yBAAKH,UAAWC,IAAMG,MAAOC,IAAKN,EAAMK,MAAOE,IAAI,KACnD,yBAAKN,UAAWC,IAAMM,yBAClB,yBAAKP,UAAWC,IAAMO,gBAClB,2CACA,wBAAIR,UAAWC,IAAMQ,iBAChBV,EAAMW,YAAYC,KAAI,SAAAC,GAAU,OAC7B,wBAAIZ,UAAWC,IAAMW,YAAaA,EAAWC,WAIzD,yBAAKb,UAAWC,IAAMa,cAClB,yCACA,uBAAGd,UAAWC,IAAMc,UAAU,kBAAC,IAAD,CAAcC,MAAOjB,EAAMgB,SAAUE,YAAa,OAAQC,OAAO,SAA/F,aACA,wBAAIlB,UAAWC,IAAMkB,eAChBpB,EAAMqB,UAAUC,MAAM,EAAE,GAAGV,KAAI,SAAAW,GAAQ,OACpC,wBAAItB,UAAWC,IAAMqB,UAArB,IAAgC,kBAAC,IAAD,CAAcN,MAAOM,EAASC,MAAON,YAAa,OAAQC,OAAO,QAAjG,IAA2GI,EAASE,KAApH,IAA0H,gCAASF,EAASG,gB,MCoCzJC,MAxDf,WAEE,IAFa,EAKiBC,mBAAS,IAL1B,mBAKNC,EALM,KAKGC,EALH,OAMeF,mBAAS,IANxB,mBAMNG,EANM,KAMEC,EANF,OAOaJ,mBAAS,IAPtB,mBAONK,EAPM,KAOCC,EAPD,KASbC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAEEA,EAASC,OAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,2CAAH,qDAkBhB,OACE,yBAAKzC,UAAU,OAEb,+CACA,0BAAM4C,SAXQ,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAQmB/B,UAAU,eACnC,2BAAOA,UAAU,aAAa+C,KAAK,SAASC,KAAK,OAAOC,YAAY,eAAejC,MAAOc,EAAQoB,SAhBnF,SAAAL,GACnBd,EAAUc,EAAEM,OAAOnC,UAgBf,4BAAQhB,UAAU,gBAAgBgD,KAAK,UAAvC,WAEF,yBAAKhD,UAAU,WACZ4B,EAAQjB,KAAI,SAAAT,GAAM,OACjB,kBAAC,EAAD,CACQkD,IAAKlD,EAAOA,OAAOuB,MACnBtB,MAAOD,EAAOA,OAAOuB,MACrBV,SAAUb,EAAOA,OAAOa,SACxBX,MAAOF,EAAOA,OAAOE,MACrBM,YAAaR,EAAOA,OAAOQ,YAC3BU,UAAWlB,EAAOA,OAAOmD,eCvCvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.cb3901bf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__BdaUe\",\"title\":\"recipe_title__1jR5P\",\"image\":\"recipe_image__BtdIE\",\"ingredientsNutrientsDiv\":\"recipe_ingredientsNutrientsDiv__SDJi3\",\"ingredientsDiv\":\"recipe_ingredientsDiv__2m7Ru\",\"ingredientsList\":\"recipe_ingredientsList__rL3Uc\",\"nutrientsDiv\":\"recipe_nutrientsDiv__2XMDf\",\"nutrientsList\":\"recipe_nutrientsList__2rUOT\"};","import React from 'react';\nimport style from './recipe.module.css'\nimport NumberFormat from 'react-number-format';\n\n\nconst Recipe = (props) => {\n    return(\n        <div className={style.recipe}>\n            <h1 className={style.title}>{props.title}</h1>\n            <img className={style.image} src={props.image} alt=\"\"/>\n            <div className={style.ingredientsNutrientsDiv}>\n                <div className={style.ingredientsDiv}>\n                    <h3>Ingredients</h3>\n                    <ul className={style.ingredientsList}>\n                        {props.ingredients.map(ingredient => (\n                            <li className={style.ingredient}>{ingredient.text}</li>\n                        ))}\n                    </ul>\n                </div>\n                <div className={style.nutrientsDiv}>\n                    <h3>Nutrients</h3>\n                    <p className={style.calories}><NumberFormat value={props.calories} displayType={'text'} format=\"####\" /> Calories</p>\n                    <ul className={style.nutrientsList}>\n                        {props.nutrients.slice(0,6).map(nutrient => (\n                            <li className={style.nutrient}> <NumberFormat value={nutrient.total} displayType={'text'} format=\"###\" /> {nutrient.unit} <strong>{nutrient.label}</strong></li>\n                        ))}\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nfunction App() {\n\n  const APP_ID = 'c17355b2';\n  const APP_KEY = '896f71918d06f40e52870c2690c5ddc3';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('');\n  \n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () =>Â {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits)\n    console.log(data.hits);\n  }\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n\n  return (\n    <div className=\"App\">\n\n      <h1>Search a Recipe</h1>\n      <form onSubmit={getSearch} className=\"search-form\">\n        <input className=\"search-bar\" name=\"search\" type=\"text\" placeholder=\"i.e. Chicken\" value={search} onChange={updateSearch}/>\n        <button className=\"search-button\" type=\"submit\">Search</button>\n      </form>\n      <div className=\"recipes\">\n        {recipes.map(recipe => (\n          <Recipe \n                  key={recipe.recipe.label}\n                  title={recipe.recipe.label} \n                  calories={recipe.recipe.calories} \n                  image={recipe.recipe.image}\n                  ingredients={recipe.recipe.ingredients}\n                  nutrients={recipe.recipe.digest}\n                  />\n        ))}\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}